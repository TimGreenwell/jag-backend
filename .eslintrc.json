{
    "env": {
        "browser": true,
        "es2021": true
    },
  //  "extends": "eslint:recommended",
    "parserOptions": {
        "ecmaVersion": "latest",
        "sourceType": "module"
    },
    "rules": {

//        "array-callback-return": "error",
////        Enforce return statements in callbacks of array methods
//
//        "constructor-super": "error",
////        Require `super()` calls in constructors
//
//
//        "for-direction": "error",
////        Enforce "for" loop update clause moving the counter in the right direction.
//
//
//        "getter-return": "error",
////        Enforce `return` statements in getters
//
//
//        "no-async-promise-executor": "error",
////        Disallow using an async function as a Promise executor
//
//
//        "no-await-in-loop": "error",
////        Disallow `await` inside of loops
//
//
//        "no-class-assign": "error",
////        Disallow reassigning class members
//
//
//        "no-compare-neg-zero": "error",
////        Disallow comparing against -0
//
//
//        "no-cond-assign": "error",
////        Disallow assignment operators in conditional expressions
//
//
//        "no-const-assign": "error",
////        Disallow reassigning `const` variables
//
//
//        "no-constant-binary-expression": "error",
////        Disallow expressions where the operation doesn't affect the value
//
//
//        "no-constant-condition": "error",
////        Disallow constant expressions in conditions
//
//
//        "no-constructor-return": "error",
////        Disallow returning value from constructor
//
//
//        "no-control-regex": "error",
////        Disallow control characters in regular expressions
//
//
//        "no-debugger": "error",
////        Disallow the use of `debugger`
//
//
//        "no-dupe-args": "error",
////        Disallow duplicate arguments in `function` definitions
//
//
//        "no-dupe-class-members": "error",
////        Disallow duplicate class members
//
//
//        "no-dupe-else-if": "error",
////        Disallow duplicate conditions in if-else-if chains
//
//
//        "no-dupe-keys": "error",
////        Disallow duplicate keys in object literals
//
//
//        "no-duplicate-case": "error",
////        Disallow duplicate case labels
//
//
//        "no-duplicate-imports": "error",
////        Disallow duplicate module imports
//
//
//        "no-empty-character-class": "error",
////        Disallow empty character classes in regular expressions
//
//
//        "no-empty-pattern": "error",
////        Disallow empty destructuring patterns
//
//
//        "no-ex-assign": "error",
////        Disallow reassigning exceptions in `catch` clauses
//
//
//        "no-fallthrough": "error",
////        Disallow fallthrough of `case` statements
//
//
//        "no-func-assign": "error",
////        Disallow reassigning `function` declarations
//
//
//        "no-import-assign": "error",
////        Disallow assigning to imported bindings
//
//
//        "no-inner-declarations": "error",
////        Disallow variable or `function` declarations in nested blocks
//
//
//        "no-invalid-regexp": "error",
////        Disallow invalid regular expression strings in `RegExp` constructors
//
//
//        "no-irregular-whitespace": "error",
////        Disallow irregular whitespace
//
//
//        "no-loss-of-precision": "error",
////        Disallow literal numbers that lose precision
//
//
//        "no-misleading-character-class": "error",
////        Disallow characters which are made with multiple code points in character class syntax
//
//
//        "no-new-symbol": "error",
////        Disallow `new` operators with the `Symbol` object
//
//
//        "no-obj-calls": "error",
////        Disallow calling global object properties as functions
//
//
//        "no-promise-executor-return": "error",
////        Disallow returning values from Promise executor functions
//
//
//        "no-prototype-builtins": "error",
////        Disallow calling some `Object.prototype` methods directly on objects
//
//
//        "no-self-assign": "error",
////        Disallow assignments where both sides are exactly the same
//
//
//        "no-self-compare": "error",
////        Disallow comparisons where both sides are exactly the same
//
//
//        "no-setter-return": "error",
////        Disallow returning values from setters
//
//
//        "no-sparse-arrays": "error",
////        Disallow sparse arrays
//
//
//        "no-template-curly-in-string": "error",
////        Disallow template literal placeholder syntax in regular strings
//
//
//        "no-this-before-super": "error",
////        Disallow `this`/`super` before calling `super()` in constructors
//
//
//        "no-undef": "error",
////        Disallow the use of undeclared variables unless mentioned in `/*global */` comments
//
//
//        "no-unexpected-multiline": "error",
////        Disallow confusing multiline expressions
//
//
//        "no-unmodified-loop-condition": "error",
////        Disallow unmodified loop conditions
//
//
//        "no-unreachable": "error",
////        Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements
//
//
//        "no-unreachable-loop": "error",
////        Disallow loops with a body that allows only one iteration
//
//
//        "no-unsafe-finally": "error",
////        Disallow control flow statements in `finally` blocks
//
//
//        "no-unsafe-negation": "error",
////        Disallow negating the left operand of relational operators
//
//
//        "no-unsafe-optional-chaining": "error",
////        Disallow use of optional chaining in contexts where the `undefined` value is not allowed
//
//
//        "no-unused-private-class-members": "error",
////        Disallow unused private class members
//
//
//        "no-unused-vars": "error",
////        Disallow unused variables
//
//
//        "no-use-before-define": "error",
////        Disallow the use of variables before they are defined
//
//
//        "no-useless-backreference": "error",
////        Disallow useless backreferences in regular expressions
//
//
//        "require-atomic-updates": "error",
////        Disallow assignments that can lead to race conditions due to usage of `await` or `yield`
//
//
//        "use-isnan": "error",
////        Require calls to `isNaN()` when checking for `NaN`
//
//
//        "valid-typeof": "error",
////        Enforce comparing `typeof` expressions against valid strings
//
//
//     //   Suggestions
//     //  These rules suggest alternate ways of doing things:
//
//        "accessor-pairs": "warn",
////        Enforce getter and setter pairs in objects and classes
//
//
//        "arrow-body-style": "warn",
////        Require braces around arrow function bodies
//
//
//        "block-scoped-var": "warn",
////        Enforce the use of variables within the scope they are defined
//
//
//        "camelcase": "warn",
////        Enforce camelcase naming convention
//
//
//        "capitalized-comments": "warn",
////        Enforce or disallow capitalization of the first letter of a comment
//
//
//        "class-methods-use-this": "warn",
////        Enforce that class methods utilize `this`
//
//
//        "complexity": "warn",
////        Enforce a maximum cyclomatic complexity allowed in a program
//
//
//        "consistent-return": "warn",
////        Require `return` statements to either always or never specify values
//
//
//        "consistent-this": "warn",
////        Enforce consistent naming when capturing the current execution context
//

        "curly": "warn",
//        Enforce consistent brace style for all control statements

//
//        "default-case": "warn",
////        Require `default` cases in `switch` statements
//
//
//        "default-case-last": "warn",
////        Enforce default clauses in switch statements to be last
//
//
//        "default-param-last": "warn",
////        Enforce default parameters to be last
//
//
//        "dot-notation": "warn",
////        Enforce dot notation whenever possible
//
//
//        "eqeqeq": "warn",
////        Require the use of `===` and `!==`
//
//
//        "func-name-matching": "warn",
////        Require function names to match the name of the variable or property to which they are assigned
//
//
//        "func-names": "warn",
////        Require or disallow named `function` expressions
//
//
//        "func-style": "warn",
////        Enforce the consistent use of either `function` declarations or expressions
//
//
//        "grouped-accessor-pairs": "warn",
////        Require grouped accessor pairs in object literals and classes
//
//
//        "guard-for-in": "warn",
////        Require `for-in` loops to include an `if` statement
//
//
//        "id-denylist": "warn",
////        Disallow specified identifiers
//
//
//        "id-length": "warn",
////        Enforce minimum and maximum identifier lengths
//
//
//        "id-match": "warn",
////        Require identifiers to match a specified regular expression
//
//
//        "init-declarations": "warn",
////        Require or disallow initialization in variable declarations
//
//
//        "max-classes-per-file": "warn",
////        Enforce a maximum number of classes per file
//
//
//        "max-depth": "warn",
////        Enforce a maximum depth that blocks can be nested
//
//
//        "max-lines": "warn",
////        Enforce a maximum number of lines per file
//
//
//        "max-lines-per-function": "warn",
////        Enforce a maximum number of lines of code in a function
//
//
//        "max-nested-callbacks": "warn",
////        Enforce a maximum depth that callbacks can be nested
//
//
//        "max-params": "warn",
////        Enforce a maximum number of parameters in function definitions
//
//
//        "max-statements": "warn",
////        Enforce a maximum number of statements allowed in function blocks
//
//
//        "multiline-comment-style": "warn",
////        Enforce a particular style for multiline comments
//
//
//        "new-cap": "warn",
////        Require constructor names to begin with a capital letter
//
//
//        "no-alert": "warn",
////        Disallow the use of `alert`, `confirm`, and `prompt`
//
//
//        "no-array-constructor": "warn",
////        Disallow `"Array"` constructors
//
//
//        "no-bitwise": "warn",
////        Disallow bitwise operators
//
//
//        "no-caller": "warn",
////        Disallow the use of `arguments.caller` or `arguments.callee`
//
//
//        "no-case-declarations": "warn",
////        Disallow lexical declarations in case clauses
//
//
//        "no-confusing-arrow": "warn",
////        Disallow arrow functions where they could be confused with comparisons
//
//
//        "no-console": "warn",
////        Disallow the use of `console`
//
//
//        "no-continue": "warn",
////        Disallow `continue` statements
//
//
//        "no-delete-var": "warn",
////        Disallow deleting variables
//
//
//        "no-div-regex": "warn",
////        Disallow division operators explicitly at the beginning of regular expressions
//
//
//        "no-else-return": "warn",
////        Disallow `else` blocks after `return` statements in `if` statements
//
//
//        "no-empty": "warn",
////        Disallow empty block statements
//
//
//        "no-empty-function": "warn",
////        Disallow empty functions
//
//
//        "no-eq-null": "warn",
////        Disallow `null` comparisons without type-checking operators
//
//
//        "no-eval": "warn",
////        Disallow the use of `eval()`
//
//
//        "no-extend-native": "warn",
////        Disallow extending native types
//
//
//        "no-extra-bind": "warn",
////        Disallow unnecessary calls to `.bind()`
//
//
//        "no-extra-boolean-cast": "warn",
////        Disallow unnecessary boolean casts
//
//
//        "no-extra-label": "warn",
////        Disallow unnecessary labels
//
//
//        "no-extra-semi": "warn",
////        Disallow unnecessary semicolons
//
//
//        "no-floating-decimal": "warn",
////        Disallow leading or trailing decimal points in numeric literals
//
//
//        "no-global-assign": "warn",
////        Disallow assignments to native objects or read-only global variables
//
//
//        "no-implicit-coercion": "warn",
////        Disallow shorthand type conversions
//
//
//        "no-implicit-globals": "warn",
////        Disallow declarations in the global scope
//
//
//        "no-implied-eval": "warn",
////        Disallow the use of `eval()`-like methods
//
//
//        "no-inline-comments": "warn",
////        Disallow inline comments after code
//
//
//        "no-invalid-this": "warn",
////        Disallow use of `this` in contexts where the value of `this` is `undefined`
//
//
//        "no-iterator": "warn",
////        Disallow the use of the `__iterator__` property
//
//
//        "no-label-var": "warn",
////        Disallow labels that share a name with a variable
//
//
//        "no-labels": "warn",
////        Disallow labeled statements
//
//
//        "no-lone-blocks": "warn",
////        Disallow unnecessary nested blocks
//
//
//        "no-lonely-if": "warn",
////        Disallow `if` statements as the only statement in `else` blocks
//
//
//        "no-loop-func": "warn",
////        Disallow function declarations that contain unsafe references inside loop statements
//
//
//        "no-magic-numbers": "warn",
////        Disallow magic numbers
//
//
//        "no-mixed-operators": "warn",
////        Disallow mixed binary operators
//
//
//        "no-multi-assign": "warn",
////        Disallow use of chained assignment expressions
//
//
//        "no-multi-str": "warn",
////        Disallow multiline strings
//
//
//        "no-negated-condition": "warn",
////        Disallow negated conditions
//
//
//        "no-nested-ternary": "warn",
////        Disallow nested ternary expressions
//
//
//        "no-new": "warn",
////        Disallow `new` operators outside of assignments or comparisons
//
//
//        "no-new-func": "warn",
////        Disallow `new` operators with the `Function` object
//
//
//        "no-new-object": "warn",
////        Disallow `Object` constructors
//
//
//        "no-new-wrappers": "warn",
////        Disallow `new` operators with the `String`, `Number`, and `Boolean` objects
//
//
//        "no-nonoctal-decimal-escape": "warn",
////        Disallow `\8` and `\9` escape sequences in string literals
//
//
//        "no-octal": "warn",
////        Disallow octal literals
//
//
//        "no-octal-escape": "warn",
////        Disallow octal escape sequences in string literals
//
//
//        "no-param-reassign": "warn",
////        Disallow reassigning `function` parameters
//
//
//        "no-plusplus": "warn",
////        Disallow the unary operators `++` and `--`
//
//
//        "no-proto": "warn",
////        Disallow the use of the `__proto__` property
//
//
//        "no-redeclare": "warn",
////        Disallow variable redeclaration
//
//
//        "no-regex-spaces": "warn",
////        Disallow multiple spaces in regular expressions
//
//
//        "no-restricted-exports": "warn",
////        Disallow specified names in exports
//
//
//        "no-restricted-globals": "warn",
////        Disallow specified global variables
//
//
//        "no-restricted-imports": "warn",
////        Disallow specified modules when loaded by `import`
//
//
//        "no-restricted-properties": "warn",
////        Disallow certain properties on certain objects
//
//
//        "no-restricted-syntax": "warn",
////        Disallow specified syntax
//
//
//        "no-return-assign": "warn",
////        Disallow assignment operators in `return` statements
//
//
//        "no-return-await": "warn",
////        Disallow unnecessary `return await`
//
//
//        "no-script-url": "warn",
////        Disallow `javascript:` urls
//
//
//        "no-sequences": "warn",
////        Disallow comma operators
//
//
//        "no-shadow": "warn",
////        Disallow variable declarations from shadowing variables declared in the outer scope
//
//
//        "no-shadow-restricted-names": "warn",
////        Disallow identifiers from shadowing restricted names
//
//
//        "no-ternary": "warn",
////        Disallow ternary operators
//
//
//        "no-throw-literal": "warn",
////        Disallow throwing literals as exceptions
//
//
//        "no-undef-init": "warn",
////        Disallow initializing variables to `undefined`
//
//
//        "no-undefined": "warn",
//        //    Disallow the use of `undefined` as an identifier
//
//
//        "no-underscore-dangle": "warn",
//        //    Disallow dangling underscores in identifiers
//
//
//        "no-unneeded-ternary": "warn",
//        //    Disallow ternary operators when simpler alternatives exist
//
//
//        "no-unused-expressions": "warn",
//        //    Disallow unused expressions
//
//
//        "no-unused-labels": "warn",
//        //    Disallow unused labels
//
//
//        "no-useless-call": "warn",
//        //    Disallow unnecessary calls to `.call()` and `.apply()`
//
//
//        "no-useless-catch": "warn",
//        //    Disallow unnecessary `catch` clauses
//
//
//        "no-useless-computed-key": "warn",
//        //    Disallow unnecessary computed property keys in objects and classes
//
//
//        "no-useless-concat": "warn",
//        //    Disallow unnecessary concatenation of literals or template literals
//
//
//        "no-useless-constructor": "warn",
//        //    Disallow unnecessary constructors
//
//
//        "no-useless-escape": "warn",
//        //    Disallow unnecessary escape characters
//
//
//        "no-useless-rename": "warn",
//        //    Disallow renaming import, export, and destructured assignments to the same name
//
//
//        "no-useless-return": "warn",
//        //    Disallow redundant return statements
//
//
//        "no-var": "warn",
//        //    Require `let` or `const` instead of `var`
//
//
//        "no-void": "warn",
//        //    Disallow `void` operators
//
//
//        "no-warning-comments": "warn",
//        //    Disallow specified warning terms in comments
//
//
//        "no-with": "warn",
//        //    Disallow `with` statements
//
//
//        "object-shorthand": "warn",
//        //    Require or disallow method and property shorthand syntax for object literals
//
//
//        "one-var": "warn",
//        //   Enforce variables to be declared either together or separately in functions
//
//
//        "one-var-declaration-per-line": "warn",
//        //    Require or disallow newlines around variable declarations
//
//
//        "operator-assignment": "warn",
//        //    Require or disallow assignment operator shorthand where possible
//
//
//        "prefer-arrow-callback": "warn",
//        //    Require using arrow functions for callbacks
//
//
//        "prefer-const": "warn",
//        //    Require `const` declarations for variables that are never reassigned after declared
//
//
//        "prefer-destructuring": "warn",
//        //    Require destructuring from arrays and/or objects
//
//
//        "prefer-exponentiation-operator": "warn",
//        //    Disallow the use of `Math.pow` in favor of the `**` operator
//
//
//        "prefer-named-capture-group": "warn",
//        //   Enforce using named capture group in regular expression
//
//
//        "prefer-numeric-literals": "warn",
//        //    Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals
//
//
//        "prefer-object-has-own": "warn",
//        //    Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`
//
//
//        "prefer-object-spread": "warn",
//        //    Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.
//
//
//        "prefer-promise-reject-errors": "warn",
//        //    Require using Error objects as Promise rejection reasons
//
//
//        "prefer-regex-literals": "warn",
//        //    Disallow use of the `RegExp` constructor in favor of regular expression literals
//
//
//        "prefer-rest-params": "warn",
//        //    Require rest parameters instead of `arguments`
//
//
//        "prefer-spread": "warn",
//        //    Require spread operators instead of `.apply()`
//
//
//        "prefer-template": "warn",
//        //    Require template literals instead of string concatenation
//
//
//        "quote-props": "warn",
//        //    Require quotes around object literal property names
//
//
//        "radix": "warn",
//        //   Enforce the consistent use of the radix argument when using `parseInt()`
//
//
//        "require-await": "warn",
//        //    Disallow async functions which have no `await` expression
//
//
//        "require-unicode-regexp": "warn",
//        //   Enforce the use of `u` flag on RegExp
//
//
//        "require-yield": "warn",
//        //    Require generator functions to contain `yield`
//
//
//        "sort-imports": "warn",
//        //   Enforce sorted import declarations within modules
//
//
//        "sort-keys": "warn",
//        //    Require object keys to be sorted
//
//
//        "sort-vars": "warn",
//        //    Require variables within the same declaration block to be sorted
//
//
//        "spaced-comment": "warn",
//        //   Enforce consistent spacing after the `//` or `/*` in a comment
//
//
//        "strict": "warn",
//        //    Require or disallow strict mode directives
//
//
//        "symbol-description": "warn",
//        //    Require symbol descriptions
//
//
//        "vars-on-top": "warn",
//        //    Require `var` declarations be placed at the top of their containing scope
//
//
//        "yoda": "warn",
//        //    Require or disallow "Yoda" conditions
//
//
////        Layout & Formatting
////        These rules care about how the code looks rather than how it executes:
//
//        "array-bracket-newline": "warn",
//        //   Enforce linebreaks after opening and before closing array brackets
//
//
//        "array-bracket-spacing": "warn",
//        //   Enforce consistent spacing inside array brackets
//
//
//        "array-element-newline": "warn",
//        //   Enforce line breaks after each array element
//

        "arrow-parens": "warn",
        //    Require parentheses around arrow function arguments


        "arrow-spacing": "warn",
        //   Enforce consistent spacing before and after the arrow in arrow functions


        "block-spacing": "warn",
        //    Disallow or enforce spaces inside of blocks after opening block and before closing block


        "brace-style": "warn",
        //   Enforce consistent brace style for blocks


        "comma-dangle": "warn",
        //    Require or disallow trailing commas


        "comma-spacing": "warn",
        //   Enforce consistent spacing before and after commas


        "comma-style": "warn",
        //   Enforce consistent comma style


        "computed-property-spacing": "warn",
        //   Enforce consistent spacing inside computed property brackets


        "dot-location": "warn",
        //   Enforce consistent newlines before and after dots


        "eol-last": "warn",
        //    Require or disallow newline at the end of files


        "func-call-spacing": "warn",
        //    Require or disallow spacing between function identifiers and their invocations


        "function-call-argument-newline": ["off","consistent"],
        //   Enforce line breaks between arguments of a function call (OFF)


        "function-paren-newline": "warn",
        //   Enforce consistent line breaks inside function parentheses


        "generator-star-spacing": "warn",
        //   Enforce consistent spacing around `*` operators in generator functions


        "implicit-arrow-linebreak": "warn",
        //   Enforce the location of arrow function bodies


        "indent": "warn",
        //   Enforce consistent indentation


        "jsx-quotes": "warn",
        //   Enforce the consistent use of either double or single quotes in JSX attributes


        "key-spacing": "warn",
        //   Enforce consistent spacing between keys and values in object literal properties


        "keyword-spacing": "warn",
        //   Enforce consistent spacing before and after keywords


        "line-comment-position": "off",
        //   Enforce position of line comments   (OFF)


        "linebreak-style": "warn",
        //   Enforce consistent linebreak style


        "lines-around-comment": "warn",
        //    Require empty lines around comments


        "lines-between-class-members": "warn",
        //    Require or disallow an empty line between class members


        "max-len": ["warn",{"code": 200, "ignoreComments": true, "ignoreStrings":  true, "ignoreUrls": true}],
        //   Enforce a maximum line length


        "max-statements-per-line": "warn",
        //   Enforce a maximum number of statements allowed per line


        "multiline-ternary": "off",
        //   Enforce newlines between operands of ternary expressions  (OFF)


        "new-parens": "warn",
        //   Enforce or disallow parentheses when invoking a constructor with no arguments


        "newline-per-chained-call": "off",
        //    Require a newline after each call in a method chain  (OFF)


        "no-extra-parens": "off",
        //    Disallow unnecessary parentheses   (OFF)


        "no-mixed-spaces-and-tabs": "warn",
        //    Disallow mixed spaces and tabs for indentation


        "no-multi-spaces": ["warn", {"ignoreEOLComments": true}],
          //    Disallow multiple spaces


        "no-multiple-empty-lines": "warn",
        //    Disallow multiple empty lines

        "no-tabs": "warn",
        //    Disallow all tabs


        "no-trailing-spaces": "warn",
        //    Disallow trailing whitespace at the end of lines
//


        "no-whitespace-before-property": "warn",
        //    Disallow whitespace before properties


//        "nonblock-statement-body-position": "warn",
//        //   Enforce the location of single-line statements
//        //   tlg - replaced this with rule 'curly' -- curly prevents single line body in control statements


        "object-curly-newline": "warn",
        //   Enforce consistent line breaks after opening and before closing braces


        "object-curly-spacing": "warn",
        //   Enforce consistent spacing inside braces


        "object-property-newline": "warn",
        //   Enforce placing object properties on separate lines


        "operator-linebreak": "warn",
        //   Enforce consistent linebreak style for operators


        "padded-blocks": [
            "warn",
            {
                "classes": "always",
                "blocks": "never",
                "switches": "never"
            }],
                //    Require or  Disallow padding within blocks


        "padding-line-between-statements": "warn",
        //    Require or disallow padding lines between statements


        "quotes": [
            "warn",
            "backtick",
            {
                "avoidEscape": true,
                "allowTemplateLiterals": true
            }
        ],
        //   Enforce the consistent use of either backticks, double, or single quotes


        "rest-spread-spacing": "warn",
        //   Enforce spacing between rest and spread operators and their expressions


        "semi": "warn",
        //    Require or disallow semicolons instead of ASI


        "semi-spacing": "warn",
        //   Enforce consistent spacing before and after semicolons


        "semi-style": "warn",
        //   Enforce location of semicolons


        "space-before-blocks": "warn",
        //   Enforce consistent spacing before blocks


        "space-before-function-paren": ["warn", {
            "anonymous": "always",
            "named": "never",
            "asyncArrow": "always"
        }],
        //   Enforce consistent spacing before `function` definition opening parenthesis


        "space-in-parens": "warn",
        //   Enforce consistent spacing inside parentheses


        "space-infix-ops": "warn",
        //    Require spacing around infix operators


        "space-unary-ops": "warn",
        //   Enforce consistent spacing before or after unary operators


        "switch-colon-spacing": "warn",
        //   Enforce spacing around colons of switch statements


        "template-curly-spacing": "warn",
        //    Require or disallow spacing around embedded expressions of template strings


        "template-tag-spacing": "warn",
        //    Require or disallow spacing between template tags and their literals


        "unicode-bom": "warn",
        //    Require or disallow Unicode byte order mark (BOM)


        "wrap-iife": "warn",
        //    Require parentheses around immediate `function` invocations


        "wrap-regex": "warn",
        //    Require parenthesis around regex literals


        "yield-star-spacing": "warn"
        //    Require or disallow spacing around the `*` in `yield*` expressions

    }
}
