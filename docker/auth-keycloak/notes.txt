
The json loaded by Dockerfile is to configure and populate Keycloak IF Keycloak's configuartion
DB is empty (ie. after Docker Volume purge or initial deploy).  Without this json, Keycloak will still
set up a Master realm but all Identity Providers, Clients and Users are gone.

Any changes to the configuration will need to be updated manually in order to persist after a volume loss.
The manual method to update this json to current keycloak config:
1) docker compose up
2) docker exec -it auth bash
3) cd /opt/keycloak/
for all realms:  (use 'bat' instead of 'sh' for windows)
4) bin/kc.sh export --file <filename>.json --users realm_file
for specific realm:
4) bin/kc.sh export --file <filename>.json --users realm_file --realm <realm_name>
5) copy into this docker/auth-keycloak/config/ directory. (copy-paste content was easiest)
  -or- a) cd to docker/auth-keycloak/config/
       b) docker cp auth:/opt/keycloak/data/import/<filename>.json .
done) This json will then be used to rebuild the keycloak realm if not in the db.


----------------------------------------------------------------------------------------------------
***!!  If errors occur after clicking the Google OAuth button - then good chance (pretty certainly) that the
import messed up the google identity provider secret got messed up.  Go to:
https://console.cloud.google.com/apis/credentials/oauthclient
and 'reset secret' and update it in the jag.baby/auth - realm - identity providers - client secret.

Error is:
 ERROR [org.keycloak.broker.oidc.AbstractOAuth2IdentityProvider]
  Failed to make identity provider oauth callback: org.keycloak.broker.provider.IdentityBrokerException:
  No access_token from server. error='invalid_client', error_description='Unauthorized', error_uri='null'

Permanent solution is unknown:
x) Copying the secret into the json does not work.  (related to keycloak export/import)
x) There is chatter about this problem on boards - hopefully a fix in near future.

-------------------------------------------------------------------------------------------------------
Getting auth-keycloak's public cert (needed for verification with jwt.io, for example)
Use: https://jag.baby/auth/realms/realm1/protocol/openid-connect/certs
extract entire key -- {.....}

[ALT]To curl it:
1) login to one of the containers: eg. docker exec -it reverse-proxy /bin/bash
2) (convenient)  apt-get update
3) (convenient) apt-get install jq
4) curl -v http://auth-keycloak:8080/auth/realms/<realm name>/protocol/openid-connect/certs | jq


Endpoints
https://jag.baby/auth/realms/realm1/.well-known/openid-configuration
https://jag.baby/auth/realms/realm1/

  issuer: 'https://jag.baby/auth/realms/realm1',
 jwks_uri: 'http://auth-keycloak:8080/auth/realms/realm1/protocol/openid-connect/certs',
revocation_endpoint: 'https://jag.baby/auth/realms/realm1/protocol/openid-connect/revoke',
   token_endpoint: 'http://auth-keycloak:8080/auth/realms/realm1/protocol/openid-connect/token',
    userinfo_endpoint: 'http://auth-keycloak:8080/auth/realms/realm1/protocol/openid-connect/userinfo',
    authorization_endpoint: 'https://jag.baby/auth/realms/realm1/protocol/openid-connect/auth',
   backchannel_authentication_endpoint: 'http://auth-keycloak:8080/auth/realms/realm1/protocol/openid-connect/ext/ciba/auth',
     check_session_iframe: 'https://jag.baby/auth/realms/realm1/protocol/openid-connect/login-status-iframe.html',
  device_authorization_endpoint: 'https://jag.baby/auth/realms/realm1/protocol/openid-connect/auth/device',
  end_session_endpoint: 'https://jag.baby/auth/realms/realm1/protocol/openid-connect/logout',
      introspection_endpoint: 'http://auth-keycloak:8080/auth/realms/realm1/protocol/openid-connect/token/introspect',
  pushed_authorization_request_endpoint: 'http://auth-keycloak:8080/auth/realms/realm1/protocol/openid-connect/ext/par/request',
    registration_endpoint: 'http://auth-keycloak:8080/auth/realms/realm1/clients-registrations/openid-connect',
