version: '3.9'

networks:
  jagnet:
    name: jagnet
    external: true

services:
  jag-postgres:
    container_name: jag-postgres
    hostname: jag-postgres
    image: 'postgres:15.1-alpine3.17'
    ports:
      - '5432:5432'
    restart: unless-stopped
    environment:
      NGINX_PROXY_CONTAINER: "reverse-proxy"
      POSTGRES_DB: 'teamworks'
      POSTGRES_USER: 'teamworks'
      POSTGRES_PASSWORD: 'teamworks'
      POSTGRES_HOST_AUTH_METHOD: 'trust'
    volumes:
      - ../api/sql/postgres/db/create_tables.sql:/docker-entrypoint-initdb.d/10_create_tables.sql
      - pgdata:/var/lib/postgresql/data
      - pgconf:/etc/postgresql
      - pglog:/var/log/postgresql
    networks:
      - jagnet

  id-postgres:
    container_name: id-postgres
    hostname: id-postgres
    image: 'postgres:15.1-alpine3.17'
    ports:
      - '5431:5432'
    restart: unless-stopped
    environment:
      NGINX_PROXY_CONTAINER: "reverse-proxy"
      POSTGRES_DB: 'keycloak'
      POSTGRES_USER: 'keycloak'
      POSTGRES_PASSWORD: 'keycloak'
      POSTGRES_HOST_AUTH_METHOD: 'trust'
    volumes:
      - pgdata2:/var/lib/postgresql/data
      - pgconf2:/etc/postgresql
      - pglog2:/var/log/postgresql
    networks:
      - jagnet

  jag-server:
    container_name: jag-server
    hostname: jag-server
    env_file:
      - .env
    restart: unless-stopped
    build:
      context: ..
      dockerfile: docker/node/Dockerfile
    ports:
      - '8888:8888'
      - '8083:8083'
    depends_on:
      - jag-postgres
    networks:
      - jagnet

  jag-id:
    container_name: jag-id
    hostname: jag-id
    image: quay.io/keycloak/keycloak
    restart: unless-stopped
    depends_on:
      - id-postgres
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      DB_VENDOR: postgres
      DB_ADDR: jag-postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: keycloak
#      KEYCLOAK_USER: root
#      KEYCLOAK_PASSWORD: root
      VIRTUAL_PORT: 8080
      KC_HTTP_RELATIVE_PATH: auth
      KC_HTTP_PORT: 8080
      KC_HOSTNAME_ADMIN_URL: http://localhost:8082/auth
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_URL: http://localhost:8082/auth

      KC_PROXY: edge
      KC_PROXY_ADDRESS_FORWARDING: true
      # KC_HOSTNAME_STRICT_HTTPS: Force https?
      KC_HOSTNAME_STRICT_HTTPS: false
      # KC_HOSTNAME_PORT: external port (proxy)
      KC_HOSTNAME_PORT: 8082
#      VIRTUAL_HOST: ${VIRTUAL_HOST}
#      LETSENCRYPT_HOST: ${LETSENCRYPT_HOST}
#      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}

#      HTTPS_METHOD: redirect
    command:
      - start-dev
      - --import-realm
      - --features=account-api
    volumes:
      - id-volume:/opt/keycloak/data/import/realm.json
    networks:
      - jagnet

  pgadmin:
    container_name: pgadmin
    hostname: pgadmin
    image: dpage/pgadmin4
    ports:
      - "5050:80"
    environment:
      NGINX_PROXY_CONTAINER: "reverse-proxy"
      PGADMIN_DEFAULT_EMAIL: admin@ihmc.moc
      PGADMIN_DEFAULT_PASSWORD: abc123
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: 40
      GUNICORN_ACCESS_LOGFILE: '/var/lib/pgadmin/access.log'
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    logging:
      driver: none
    depends_on:
      - jag-postgres
      - id-postgres
    networks:
      - jagnet

  reverse-proxy:
    container_name: reverse-proxy
    hostname: reverse-proxy
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "8082:8082"
      - "443:443"
    depends_on:
      - jag-server
      - jag-id
      - pgadmin
    volumes:
      - ./nginx-proxy/nginx.conf:/etc/nginx/nginx.conf
      - "html:/usr/share/nginx/html"
      - "dhparam:/etc/nginx/dhparam"
      - "vhost:/etc/nginx/vhost.d"
      - "certs:/etc/nginx/certs"
      - "proxy_logs:/var/log/nginx"
      - "/run/docker.sock:/tmp/docker.sock:ro"
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /tmp/acme_challenge:/tmp/acme_challenge
      - ./config:/config
    networks:
      - jagnet

#  letsencrypt:
#    image: "jrcs/letsencrypt-nginx-proxy-companion:latest"
#    container_name: "letsencrypt-helper"
#    volumes:
#      - "html:/usr/share/nginx/html"
#      - "dhparam:/etc/nginx/dhparam"
#      - "vhost:/etc/nginx/vhost.d"
#      - "certs:/etc/nginx/certs"
#      - "/run/docker.sock:/var/run/docker.sock:ro"
#    environment:
#      NGINX_PROXY_CONTAINER: "reverse-proxy"
#      DEFAULT_EMAIL: "tim@greenwell.de"
#    restart: "always"
#    depends_on:
#      - "reverse-proxy"
#    networks:
#      - "jagnet"

volumes:
  pgdata:
  pgconf:
  pglog:
  pgdata2:
  pgconf2:
  pglog2:
  pgadmin-data:
  html:
  dhparam:
  vhost:
  certs:
  id-volume:
  proxy_logs:



