version: '3.9'

services:
#  stager:
#    container_name: stager
#    hostname: stager
#    build:
#      context: ..
#      dockerfile: docker/Dockerfile


  jag-postgres:
#    image: 'postgres:15.1-alpine3.17'
    container_name: jag-postgres
    hostname: jag-postgres
    build:
      context: ..
      dockerfile: docker/jag-postgres/Dockerfile
    # CONFIG
    environment:
      NGINX_PROXY_CONTAINER: "reverse-proxy"
      POSTGRES_DB: ${JAG_POSTGRES_DB}
      POSTGRES_USER: ${JAG_POSTGRES_USER}
      POSTGRES_PASSWORD: ${JAG_POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: 'trust'
    expose:
      - 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${JAG_POSTGRES_DB} -U ${JAG_POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    # RESOURCES
    networks:
      - jagnet
    volumes:
#      - type: bind
#        source: ../api/sql/postgres/db/create_tables.sql
#        target: /docker-entrypoint-initdb.d/10_create_tables.sql
#      - type: volume
#        source: startup/create_tables.sql
#        target: /docker-entrypoint-initdb.d/10_create_tables.sql
      - type: volume
        source: pgdata
        target: /var/lib/postgresql/data
      - type: volume
        source: pgconf
        target: /etc/postgresql
      - type: volume
        source: pglog
        target: /var/log/postgresql

  auth-postgres:
#    image: 'postgres:15.1-alpine3.17'
    container_name: auth-postgres
    hostname: auth-postgres
    build:
      context: ..
      dockerfile: docker/auth-postgres/Dockerfile
    # CONFIG
    environment:
      NGINX_PROXY_CONTAINER: "reverse-proxy"
      POSTGRES_DB: ${AUTH_POSTGRES_DB}
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: 'trust'
    expose:
      - 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${AUTH_POSTGRES_DB} -U ${AUTH_POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    # RESOURCES
    networks:
      - jagnet
    volumes:
#      - ./sql:/docker-entrypoint-initdb.d/:ro
      - pgdata2:/var/lib/postgresql/data
      - pgconf2:/etc/postgresql
      - pglog2:/var/log/postgresql


  auth:
#    image: quay.io/keycloak/keycloak
    container_name: auth
    hostname: auth
    build:
      context: ..
      dockerfile: docker/auth/Dockerfile
    # CONFIG
    command:
      - start-dev
      - --import-realm
      - --features=account-api
    depends_on:
      auth-postgres:
        condition: "service_healthy"
    environment:
      KEYCLOAK_ADMIN: ${AUTH_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${AUTH_ADMIN_PASSWORD}
      DB_USER: ${AUTH_POSTGRES_USER}
      DB_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://auth-postgres:5432/${AUTH_POSTGRES_DB}
      KC_HTTP_RELATIVE_PATH: /auth
      KC_HOSTNAME_ADMIN_URL: https://jag.baby/auth    # not req'd but more clear. (can use to move admin later)
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT: false
      KC_PROXY: edge
      KC_PROXY_ADDRESS_FORWARDING: true
      KC_HOSTNAME_STRICT_HTTPS: false  # good
      KC_HOSTNAME_URL: https://jag.baby/auth         # not req'd but more clear.
      KC_HOSTNAME_STRICT_BACKCHANNEL: false           # allow back channel for comms between containers.
      KC_HOSTNAME_PORT: 80
    expose:
      - 8080
    healthcheck:
      test: "curl -f auth:8080/auth/realms/master"
      interval: 5s
      timeout: 5s
      retries: 30
    restart: unless-stopped
    # RESOURCES
#    volumes:
#      - type: bind
#        source: ./auth/config/
#        target: /opt/keycloak/data/import/
#      - type: volume
#        source: startup/master-realm.json1
#        target: /opt/keycloak/data/import/master-realm.json1
    networks:
      - jagnet


  jag-server:
    container_name: jag-server
    hostname: jag-server
    # CONFIG
    build:
      context: ..
      dockerfile: docker/jag-server/Dockerfile
    depends_on:
      auth:
        condition: "service_healthy"
      jag-postgres:
        condition: "service_healthy"
    env_file:
      - .env
    ports:
      - '8888:8888'
    healthcheck:
      test: "curl -f work.greenwell.de"
#      test: "curl -f jag-server:8888/jag"
      interval: 5s
      timeout: 5s
      retries: 20
    restart: unless-stopped
    # RESOURCES
    networks:
      - jagnet

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    hostname: pgadmin
    # CONFIG
    depends_on:
      jag-postgres:
        condition: "service_healthy"
      auth-postgres:
        condition: "service_healthy"
    environment:
      NGINX_PROXY_CONTAINER: "reverse-proxy"
      PGADMIN_DEFAULT_EMAIL: admin@ihmc.moc
      PGADMIN_DEFAULT_PASSWORD: abc123
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: 40
      GUNICORN_ACCESS_LOGFILE: '/var/lib/pgadmin/access.log'
    expose:
      - 80
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://pgadmin:80/misc/ping"]
      interval: 5s
      timeout: 5s
      retries: 20
    logging:
      driver: none
    # RESOURCES
    networks:
      - jagnet
    volumes:
      - pgadmin-data:/var/lib/pgadmin


  reverse-proxy:
#    image: nginx:latest
    container_name: reverse-proxy
    hostname: reverse-proxy
    # CONFIG
    build:
      context: ..
      dockerfile: docker/reverse-proxy/Dockerfile

    # CONFIG
    depends_on:
      jag-server:
        condition: "service_healthy"
      auth:
        condition: "service_healthy"
      pgadmin:
        condition: "service_healthy"
    environment:
      PROXY_IP: ${PROXY_IP}
      PUBLIC_NAME: ${PUBLIC_NAME}
      PROXY_HTTP_PORT: ${PROXY_HTTP_PORT}
      PROXY_HTTPS_PORT: ${PROXY_HTTPS_PORT}
      REPLACE_VARS: ${REPLACE_VARS}
    healthcheck:
      test: "curl -k https://reverse-proxy:${PROXY_HTTPS_PORT}/jag"
      interval: 5s
      timeout: 5s
      retries: 20
    ports:
      - "80:8080"
      - "443:8082"
    restart: unless-stopped
    # RESOURCES
    volumes:
#?      - ./config:/config
#      - ./nginx-proxy/templates:/etc/nginx/templates
#      - ./certbot/conf:/etc/letsencrypt
#      - ./certbot/www:/var/www/certbot
#?      - /tmp/acme_challenge:/tmp/acme_challenge
      - "html:/usr/share/nginx/html"
      - "dhparam:/etc/nginx/dhparam"
      - "vhost:/etc/nginx/vhost.d"
      - "certs:/etc/nginx/certs"
      - "proxy_logs:/var/log/nginx"
      - "/run/docker.sock:/tmp/docker.sock:ro"
    networks:
      - jagnet
    command: /bin/bash -c "
      echo 'START'
      && envsubst $$REPLACE_VARS < /etc/nginx/templates/nginx.conf.template > /etc/nginx/nginx.conf
      && nginx -g \'daemon off;\'
      && while :; do sleep 6h & wait $${!}; nginx -s reload; done
      && echo 'ALL DONE'"


  certbot:
#    image: certbot/certbot
    build:
      context: ..
      dockerfile: docker/certbot/Dockerfile
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
#    volumes:
#      - ./certbot/conf:/etc/letsencrypt
#      - ./certbot/www:/var/www/certbot

#  letsencrypt:
#    image: "jrcs/letsencrypt-nginx-proxy-companion:latest"
#    container_name: "letsencrypt-helper"
#    volumes:
#      - "html:/usr/share/nginx/html"
#      - "dhparam:/etc/nginx/dhparam"
#      - "vhost:/etc/nginx/vhost.d"
#      - "certs:/etc/nginx/certs"
#      - "/run/docker.sock:/var/run/docker.sock:ro"
#    environment:
#      NGINX_PROXY_CONTAINER: "reverse-proxy"
#      DEFAULT_EMAIL: "tim@greenwell.de"
#    restart: "always"
#    depends_on:
#      - "reverse-proxy"
#    networks:
#      - "jagnet"

volumes:
#  setup:
#    name: "startup"
#    external: true
  pgdata:
    name: "pgdata"
  pgconf:
    name: "pgconf"
  pglog:
    name: "pglog"
  pgdata2:
    name: "pgdata2"
  pgconf2:
    name: "pgconf2"
  pglog2:
    name: "pglog2"
  pgadmin-data:
    name: "pgadmin-data"
  html:
    name: "html"
  dhparam:
    name: "dhparam"
  vhost:
    name: "vhost"
  certs:
    name: "certs"
  auth-volume:
    name: "auth-volume"
  proxy_logs:
    name: "proxy_logs"

networks:
  jagnet:
    name: jagnet
    external: true

